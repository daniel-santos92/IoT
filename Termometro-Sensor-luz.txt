// Saídas Digitais - Display de unidades (UA a UG) e Display de dezenas (DA a DG)
const int UA = 0;
const int UB = 1;
const int UC = 2;
const int UD = 3;
const int UE = 4;
const int UF = 5;
const int UG = 6;

const int DA = 7;
const int DB = 8;
const int DC = 9;
const int DD = 10;
const int DE = 11;
const int DF = 12;
const int DG = 13;

// Entradas Analógicas - Sensor de temperatura e sensor de luz
const int TMP = A0;
const int LIGHT_SENSOR = A5;

unsigned int cont = 0;
unsigned long previousMillis = 0;
const long interval = 2000;  // Intervalo de 2 segundos
bool showTemperature = true;  // Alternar entre temperatura e luz

// Tabela para exibir os números de 0 a 9 no display de 7 segmentos
const byte tabelaSeteSeg[10][7] = 
{ // A B C D E F G
  { 1,1,1,1,1,1,0},  // 0
  { 0,1,1,0,0,0,0},  // 1
  { 1,1,0,1,1,0,1},  // 2
  { 1,1,1,1,0,0,1},  // 3 
  { 0,1,1,0,0,1,1},  // 4
  { 1,0,1,1,0,1,1},  // 5
  { 1,0,1,1,1,1,1},  // 6
  { 1,1,1,0,0,0,0},  // 7
  { 1,1,1,1,1,1,1},  // 8
  { 1,1,1,1,0,1,1}   // 9  
};

// Função para converter e exibir o valor nos displays de 7 segmentos
void converteValorDisplay(byte valor) {
  byte pino;
  int numero;

  // Controle do display de dezenas (pinos 7 a 13)
  pino = 7;  // Primeiro pino do display de dezenas
  numero = valor / 10;  // Obtém o dígito da dezena
  for (byte x = 0; x < 7; x++) {
    digitalWrite(pino, tabelaSeteSeg[numero][x]);
    pino++;
  }

  // Controle do display de unidades (pinos 0 a 6)
  pino = 0;  // Primeiro pino do display de unidades
  numero = valor % 10;  // Obtém o dígito da unidade
  for (byte x = 0; x < 7; x++) {
    digitalWrite(pino, tabelaSeteSeg[numero][x]);
    pino++;
  }
}

void setup() {
  // Configura os pinos como saídas para os displays de 7 segmentos
  pinMode(UA, OUTPUT);
  pinMode(UB, OUTPUT);
  pinMode(UC, OUTPUT);
  pinMode(UD, OUTPUT);
  pinMode(UE, OUTPUT);
  pinMode(UF, OUTPUT);
  pinMode(UG, OUTPUT);
  
  pinMode(DA, OUTPUT);
  pinMode(DB, OUTPUT);
  pinMode(DC, OUTPUT);
  pinMode(DD, OUTPUT);
  pinMode(DE, OUTPUT);
  pinMode(DF, OUTPUT);
  pinMode(DG, OUTPUT);
}

void loop() {
  unsigned long currentMillis = millis();

  // Alterna a cada 2 segundos
  if (currentMillis - previousMillis >= interval) {
    previousMillis = currentMillis;
    showTemperature = !showTemperature;  // Alterna entre mostrar temperatura e luz
  }

  if (showTemperature) {
    // Exibe a temperatura
    cont = analogRead(TMP); // Lê o valor do sensor de temperatura (0 a 1023)
    float tensao = cont * (5000.0 / 1023.0); // Convertendo para mV
    float temperatura = (tensao - 500) / 10.0;
    int temperaturaInt = int(temperatura); // Obtém a parte inteira da temperatura
    converteValorDisplay(temperaturaInt);
  } else {
    // Exibe a intensidade de luz
    int luz = analogRead(LIGHT_SENSOR);  // Lê o valor do sensor de luz (0 a 1023)
    int intensidadeLuz = map(luz, 0, 1023, 0, 99);  // Mapeia para o intervalo de 0 a 99
    converteValorDisplay(intensidadeLuz);
  }

  delay(500); // Ajuste o atraso conforme necessário para a visualização
}
z
